# ------------- in-herbis-veritas .windsurfrules -------------
# 0. Contexte général
0. Site e-commerce Next.js 15 (App Router + Server Components), React 18.2, TypeScript 5, hébergé Supabase.  
0a. MCP actifs : Context7, Supabase, Dart (project manager). Windsurf → Settings → MCP confirme leur disponibilité.  🔗 Context7 docs  🔗 Supabase docs  🔗 Dart MCP

# 1. Structure & conventions
1. Pages sous /app ; Server Components par défaut ; marquer 'use client' si nécessaire.  
2. Alias absolus : '@/components', '@/lib', '@/stores', '@/db', '@/types'.  
3. TS strict : `strict: true`, `noImplicitAny: true`.  
4. Imports relatifs limités à deux niveaux maxi.
4a. Layout Racine (`app/layout.tsx`): Placer `<body>` immédiatement après `<html>` (ex: `<html><body>...</body></html>`) SANS espace, commentaire ni retour à la ligne pour éviter l'erreur d'hydratation "whitespace text node".

# 2. Styling & UI
5. Tailwind 3 avec @import base, components, utilities ; content cible ./app & ./src.  
6. Composants = shadcn/ui ; commande CLI : `npx shadcn-ui@latest add`.  
7. Thèmes via `data-slot` + Tailwind v4 compatibility.
[Rule 2025-04-27] Avoid using @apply with non-existent classes in Tailwind CSS
- When using @apply in CSS files, ensure the class exists in Tailwind's generated CSS.
- If a class like 'outline-ring/50' is not generated by Tailwind, replace @apply with direct CSS properties (e.g., 'outline-color: color-mix(in oklab, var(--ring) 50%, transparent)') to prevent build errors.
- Always check the generated CSS in DevTools to confirm utility classes are present before using them with @apply.

# 3. Animation & accessibilité
8. Animations : Framer Motion (variants, layout).  
9. Respect WCAG 2.2 : aria-* obligatoires sur tout composant interactif.

# 4. State & formulaires
10. State global → Zustand 4 ; découper selectors, utiliser shallow.  
11. Formulaires : React Hook Form + Zod ; validation côté client ET côté serveur (Server Action).

# 5. Données & sécurité
12. Supabase-js 2 : appels DB UNIQUEMENT dans Server Components/Route Handlers.  
13. RLS obligatoire sur chaque table ; politiques distinctes `anon` / `authenticated`.  
14. Next.js 15 dynamic APIs : `params` et `searchParams` sont désormais asynchrones ; en Server Components, await avant déstructuration (ex : `const { locale } = await params;`), en Client Components, unwrap avec `React.use(params)`.
15. Interdiction d’exposer la clé `service_role`. Variables dans `.env.local`.

# 6. i18n & routes
16. next-intl pour fr, en, de, es ; fichiers JSON dans /messages.  
17. URLs publiques : /{locale}/… ; locale par défaut = fr.

# 7. Performances
18. Dev : `next dev --turbo` ; analyse bundle `next build --profile`.  
19. `export const dynamic = "force-dynamic"` uniquement si nécessaire.  
20. Favoriser Edge Runtime (revalidateTag) pour fonctions légères.

# 8. Tests & CI
21. Jest unitaires dans __tests__, Cypress e2e dans cypress/.  
22. Workflow GitHub : `npm run lint && npm run test && npm run build`.

# 9. MCP directives spécifiques
23. Context7 : chaque prompt complexe doit inclure le tag `use context7` pour injecter docs live (Next 15, Supabase, shadcn/ui…).  
24. Supabase MCP : activer l’action “rowLevelSecurityCheck” avant tout commit touchant `/supabase/`.  
25. Dart MCP :  
    • `createTask` quand un TODO > 30 mn est détecté dans le diff ;  
    • `updateTask` sur push si commit message contient `#task-<id>`.

# 10. Répertoires protégés
26. Ne JAMAIS éditer `/public`, `/supabase/migrations`, `/node_modules`.

# 11. Commits & documentation
27. Convention commit : `type(scope): description` (ex. feat(cart): optimistic update).  
28. Commentaires « why » requis si > 20 lignes changées.

# 12. AI guidelines
29. Cascade doit proposer : snippet + explication + source Context7.  
30. Si Cascade manque de contexte, déclencher automatiquement `use context7`.

# ------------- end .windsurfrules -------------
