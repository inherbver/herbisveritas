#!/usr/bin/env node

/**
 * Analyseur de complexit√© des composants React
 * Identifie les opportunit√©s de d√©composition et modernisation
 */

import { readFileSync } from 'fs';
import { join, relative } from 'path';

interface ComponentAnalysis {
  file: string;
  lines: number;
  complexity: {
    functions: number;
    hooks: number;
    useEffects: number;
    stateVariables: number;
    imports: number;
    exports: number;
    jsx: number;
    conditionals: number;
  };
  patterns: {
    hasFormLogic: boolean;
    hasApiCalls: boolean;
    hasComplexState: boolean;
    hasBusinessLogic: boolean;
    hasStyling: boolean;
    hasEventHandlers: boolean;
  };
  recommendations: DecompositionStrategy;
  priority: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW';
}

interface DecompositionStrategy {
  approach: string;
  extractableHooks: string[];
  extractableComponents: string[];
  separableLogic: string[];
  modernizationSteps: string[];
  estimatedReduction: string;
  effortHours: number;
}

class ComponentAnalyzer {
  private criticalComponents = [
    'src/components/domain/checkout/CheckoutClientPage.tsx',
    'src/components/features/admin/EventLogFilters.tsx',
    'src/components/features/admin/magazine/article-form.tsx',
    'src/components/forms/change-password-form.tsx',
    'src/components/domain/profile/password-change-form.tsx'
  ];

  /**
   * Lance l'analyse compl√®te des composants volumineux
   */
  async analyzeComponents(): Promise<void> {
    console.log('üî¨ Analyse des composants volumineux...\n');

    const analyses: ComponentAnalysis[] = [];

    for (const componentPath of this.criticalComponents) {
      try {
        const analysis = await this.analyzeComponent(componentPath);
        analyses.push(analysis);
        console.log(`‚úÖ Analys√©: ${relative(process.cwd(), componentPath)} (${analysis.lines} lignes)`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è  Erreur analyse ${componentPath}: ${error}`);
      }
    }

    this.generateDecompositionPlan(analyses);
  }

  /**
   * Analyse en d√©tail un composant sp√©cifique
   */
  private async analyzeComponent(file: string): Promise<ComponentAnalysis> {
    const content = readFileSync(file, 'utf-8');
    const lines = content.split('\n');

    const complexity = this.calculateComplexity(content);
    const patterns = this.detectPatterns(content);
    const recommendations = this.generateRecommendations(file, complexity, patterns, content);
    const priority = this.calculatePriority(complexity, patterns);

    return {
      file: relative(process.cwd(), file),
      lines: lines.length,
      complexity,
      patterns,
      recommendations,
      priority
    };
  }

  /**
   * Calcule les m√©triques de complexit√©
   */
  private calculateComplexity(content: string): ComponentAnalysis['complexity'] {
    return {
      functions: (content.match(/(?:function|const\s+\w+\s*=\s*(?:async\s+)?\(|=>\s*{)/g) || []).length,
      hooks: (content.match(/use[A-Z]\w*/g) || []).length,
      useEffects: (content.match(/useEffect\s*\(/g) || []).length,
      stateVariables: (content.match(/useState\s*\(/g) || []).length,
      imports: (content.match(/import\s+/g) || []).length,
      exports: (content.match(/export\s+/g) || []).length,
      jsx: (content.match(/<[A-Z]\w*/g) || []).length,
      conditionals: (content.match(/if\s*\(|switch\s*\(|\?\s*:|&&\s*</g) || []).length
    };
  }

  /**
   * D√©tecte les patterns architecturaux
   */
  private detectPatterns(content: string): ComponentAnalysis['patterns'] {
    return {
      hasFormLogic: /useForm|FormProvider|form\./.test(content),
      hasApiCalls: /fetch\(|axios\.|supabase\.|mutation|query/.test(content),
      hasComplexState: /useReducer|useState.*object|setState.*prev/.test(content),
      hasBusinessLogic: /calculate|validate|process|transform/.test(content),
      hasStyling: /className|style=|css`|styled/.test(content),
      hasEventHandlers: /onClick|onChange|onSubmit|handle[A-Z]/.test(content)
    };
  }

  /**
   * G√©n√®re les recommandations de d√©composition
   */
  private generateRecommendations(
    file: string, 
    complexity: ComponentAnalysis['complexity'], 
    patterns: ComponentAnalysis['patterns'],
    content: string
  ): DecompositionStrategy {
    const filename = file.split('/').pop()?.replace('.tsx', '') || 'Component';
    
    let approach = '';
    let extractableHooks: string[] = [];
    let extractableComponents: string[] = [];
    let separableLogic: string[] = [];
    let modernizationSteps: string[] = [];
    let estimatedReduction = '';
    let effortHours = 0;

    // Analyse sp√©cifique par composant
    if (file.includes('CheckoutClientPage')) {
      approach = 'D√©composition par √©tapes du processus de checkout';
      extractableHooks = [
        'useCheckoutState() - Gestion de l\'√©tat multi-√©tapes',
        'useAddressForm() - Validation adresses',
        'usePaymentForm() - Int√©gration Stripe',
        'useOrderSubmission() - Soumission finale'
      ];
      extractableComponents = [
        'AddressStep - S√©lection/saisie adresse',
        'PaymentStep - M√©thodes de paiement',
        'ReviewStep - R√©capitulatif commande',
        'ConfirmationStep - Confirmation finale'
      ];
      separableLogic = [
        'Validation des √©tapes',
        'Calculs de livraison',
        'Interface Stripe',
        'Gestion des erreurs'
      ];
      estimatedReduction = '476 ‚Üí 4√ó80-120 lignes (65% r√©duction)';
      effortHours = 12;
    }

    else if (file.includes('EventLogFilters')) {
      approach = 'S√©paration UI/logique m√©tier avec hooks sp√©cialis√©s';
      extractableHooks = [
        'useEventFilters() - Logique de filtrage',
        'useEventSearch() - Recherche et pagination',
        'useFilterPersistence() - Sauvegarde √©tat filtres'
      ];
      extractableComponents = [
        'FilterGroup - Groupe de filtres',
        'DateRangePicker - S√©lection p√©riode',
        'UserSelector - Filtre utilisateurs',
        'EventTypeFilter - Types d\'√©v√©nements'
      ];
      separableLogic = [
        'Construction des requ√™tes',
        'Validation des filtres',
        'Export des donn√©es',
        'Cache des r√©sultats'
      ];
      estimatedReduction = '474 ‚Üí 200 lignes principales + hooks (58% r√©duction)';
      effortHours = 8;
    }

    else if (file.includes('article-form')) {
      approach = 'Formulaire compos√© avec √©diteur d√©coupl√©';
      extractableHooks = [
        'useArticleForm() - Validation et soumission',
        'useAutoSave() - Sauvegarde automatique',
        'useImageUpload() - Gestion images',
        'useRichTextEditor() - Configuration √©diteur'
      ];
      extractableComponents = [
        'ArticleMetadata - Titre, cat√©gorie, tags',
        'TiptapEditor - √âditeur riche d√©coupl√©',
        'ImageManager - Upload et gestion images',
        'PublicationControls - Statut et publication'
      ];
      separableLogic = [
        'Validation contenu',
        'Transformation HTML',
        'Upload progressif',
        'Gestion versions'
      ];
      estimatedReduction = '526 ‚Üí 150 lignes principales + composants (71% r√©duction)';
      effortHours = 10;
    }

    else if (file.includes('password-change-form') || file.includes('change-password-form')) {
      approach = 'Unification avec composant partag√©';
      extractableHooks = [
        'usePasswordValidation() - R√®gles centralis√©es',
        'useSecureForm() - S√©curit√© renforc√©e'
      ];
      extractableComponents = [
        'PasswordField - Champ avec validation',
        'PasswordStrength - Indicateur force',
        'SecurityNotice - Messages s√©curit√©'
      ];
      separableLogic = [
        'Validation en temps r√©el',
        'R√®gles de complexit√©',
        'Messages d\'erreur i18n'
      ];
      estimatedReduction = '2 composants ‚Üí 1 composant unifi√© (50% r√©duction)';
      effortHours = 6;
    }

    // √âtapes de modernisation communes
    modernizationSteps = [
      '1. Extraire la logique m√©tier en hooks personnalis√©s',
      '2. Cr√©er les sous-composants focalis√©s',
      '3. Impl√©menter la composition avec Server Components',
      '4. Migrer l\'√©tat global vers Zustand si n√©cessaire',
      '5. Ajouter les tests unitaires pour chaque partie',
      '6. Optimiser les re-renders avec React.memo',
      '7. Valider la performance et l\'accessibilit√©'
    ];

    return {
      approach,
      extractableHooks,
      extractableComponents,
      separableLogic,
      modernizationSteps,
      estimatedReduction,
      effortHours
    };
  }

  /**
   * Calcule la priorit√© de refactoring
   */
  private calculatePriority(
    complexity: ComponentAnalysis['complexity'],
    patterns: ComponentAnalysis['patterns']
  ): 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' {
    let score = 0;

    // Facteurs de complexit√©
    if (complexity.functions > 15) score += 3;
    if (complexity.hooks > 8) score += 2;
    if (complexity.useEffects > 5) score += 2;
    if (complexity.stateVariables > 6) score += 2;
    if (complexity.jsx > 30) score += 1;

    // Facteurs de patterns probl√©matiques
    if (patterns.hasComplexState) score += 2;
    if (patterns.hasBusinessLogic && patterns.hasFormLogic) score += 2;
    if (patterns.hasApiCalls && patterns.hasStyling) score += 1;

    if (score >= 8) return 'CRITICAL';
    if (score >= 6) return 'HIGH';
    if (score >= 4) return 'MEDIUM';
    return 'LOW';
  }

  /**
   * G√©n√®re le plan de d√©composition d√©taill√©
   */
  private generateDecompositionPlan(analyses: ComponentAnalysis[]): void {
    console.log('\nüìã G√©n√©ration du plan de d√©composition...\n');

    // Trie par priorit√© et taille
    const sortedAnalyses = analyses.sort((a, b) => {
      const priorityOrder = { CRITICAL: 4, HIGH: 3, MEDIUM: 2, LOW: 1 };
      return priorityOrder[b.priority] - priorityOrder[a.priority] || b.lines - a.lines;
    });

    let plan = `# PLAN DE MODERNISATION COMPOSANTS - HERBISVERITAS

G√©n√©r√© le: ${new Date().toISOString()}

## R√âSUM√â EX√âCUTIF

**Composants analys√©s**: ${analyses.length}
**Lignes totales**: ${analyses.reduce((sum, a) => sum + a.lines, 0)}
**R√©duction estim√©e**: ${this.calculateTotalReduction(analyses)}
**Effort total**: ${analyses.reduce((sum, a) => sum + a.recommendations.effortHours, 0)} heures

---

## ANALYSE PAR COMPOSANT

`;

    for (const analysis of sortedAnalyses) {
      const emoji = analysis.priority === 'CRITICAL' ? 'üî¥' : 
                   analysis.priority === 'HIGH' ? 'üü†' : 
                   analysis.priority === 'MEDIUM' ? 'üü°' : 'üü¢';
      
      plan += `### ${emoji} \`${analysis.file}\`

**M√©triques actuelles**:
- **Lignes**: ${analysis.lines}
- **Fonctions**: ${analysis.complexity.functions}
- **Hooks**: ${analysis.complexity.hooks}
- **√âtat local**: ${analysis.complexity.stateVariables}
- **Effets**: ${analysis.complexity.useEffects}
- **Composants JSX**: ${analysis.complexity.jsx}

**Patterns d√©tect√©s**:
${Object.entries(analysis.patterns)
  .filter(([_, value]) => value)
  .map(([key, _]) => `- ${this.translatePattern(key)}`)
  .join('\n')}

**Strat√©gie de d√©composition**: ${analysis.recommendations.approach}

#### Hooks √† extraire:
${analysis.recommendations.extractableHooks.map(hook => `- \`${hook}\``).join('\n')}

#### Composants √† cr√©er:
${analysis.recommendations.extractableComponents.map(comp => `- \`${comp}\``).join('\n')}

#### Logique √† s√©parer:
${analysis.recommendations.separableLogic.map(logic => `- ${logic}`).join('\n')}

**Impact estim√©**: ${analysis.recommendations.estimatedReduction}
**Effort**: ${analysis.recommendations.effortHours} heures

---

`;
    }

    plan += `## STRAT√âGIE D'IMPL√âMENTATION

### Phase 1: Composants Critiques (${sortedAnalyses.filter(a => a.priority === 'CRITICAL').length} composants)

`;

    for (const analysis of sortedAnalyses.filter(a => a.priority === 'CRITICAL')) {
      plan += `#### \`${analysis.file}\`

**Approche**: ${analysis.recommendations.approach}

**√âtapes recommand√©es**:
${analysis.recommendations.modernizationSteps.map((step, i) => `${i + 1}. ${step}`).join('\n')}

**Nouvelles structures de fichiers**:
\`\`\`
${this.generateFileStructure(analysis)}
\`\`\`

`;
    }

    plan += `### Phase 2: Composants Importants

`;

    for (const analysis of sortedAnalyses.filter(a => a.priority === 'HIGH')) {
      plan += `#### \`${analysis.file}\`

**Focus**: ${analysis.recommendations.approach}
**Effort**: ${analysis.recommendations.effortHours}h
**Gains**: ${analysis.recommendations.estimatedReduction}

`;
    }

    plan += `## PATTERNS DE MODERNISATION

### 1. Architecture Server/Client Components

\`\`\`typescript
// Pattern moderne recommand√©

// Server Component (donn√©es)
export default async function CheckoutPage() {
  const cartData = await getCartData();
  return <CheckoutClient initialData={cartData} />;
}

// Client Component (interactivit√©)
'use client';
export function CheckoutClient({ initialData }: Props) {
  const { state, actions } = useCheckoutState(initialData);
  // ...
}
\`\`\`

### 2. Hooks Personnalis√©s Sp√©cialis√©s

\`\`\`typescript
// Logique m√©tier extraite
export function useCheckoutState(initialData: CartData) {
  const [step, setStep] = useState(1);
  const [addresses, setAddresses] = useState([]);
  
  const nextStep = useCallback(() => {
    // Validation et transition
  }, []);
  
  return { step, addresses, nextStep };
}
\`\`\`

### 3. Composition de Composants

\`\`\`typescript
// D√©composition en composants focalis√©s
function CheckoutFlow() {
  return (
    <CheckoutProvider>
      <CheckoutSteps>
        <AddressStep />
        <PaymentStep />
        <ReviewStep />
      </CheckoutSteps>
    </CheckoutProvider>
  );
}
\`\`\`

---

## OUTILS ET AUTOMATISATION

### Scripts de Modernisation

\`\`\`bash
# G√©n√®re les hooks √† partir des composants
npm run extract:hooks

# Cr√©e la structure de composants
npm run create:component-structure

# Valide la migration
npm run validate:modernization
\`\`\`

### Configuration ESLint

\`\`\`typescript
// eslint.config.js
export default [
  {
    rules: {
      'max-lines-per-function': ['warn', 50],
      'max-component-lines': ['warn', 200],
      'prefer-custom-hooks': 'warn',
      'no-complex-jsx': 'warn'
    }
  }
];
\`\`\`

---

## PLAN D'EX√âCUTION

### Semaine 1: CheckoutClientPage (CRITICAL)
- [ ] **Jour 1-2**: Extraction hooks de gestion d'√©tat (6h)
- [ ] **Jour 3-4**: Cr√©ation composants √©tapes (6h)

### Semaine 2: EventLogFilters (CRITICAL)
- [ ] **Jour 1-2**: S√©paration logique filtrage (4h)
- [ ] **Jour 3**: Composants de filtres (4h)

### Semaine 3: article-form (HIGH)
- [ ] **Jour 1-2**: D√©coupage √©diteur (5h)
- [ ] **Jour 3-4**: Hooks m√©tier (5h)

### Semaine 4: Forms unification (HIGH)
- [ ] **Jour 1-2**: Composant PasswordField unifi√© (3h)
- [ ] **Jour 3**: Migration et tests (3h)

---

## M√âTRIQUES DE SUCC√àS

### Avant Modernisation
- **Lignes moyennes/composant**: ${Math.round(analyses.reduce((sum, a) => sum + a.lines, 0) / analyses.length)}
- **Fonctions moyennes/composant**: ${Math.round(analyses.reduce((sum, a) => sum + a.complexity.functions, 0) / analyses.length)}
- **Hooks moyens/composant**: ${Math.round(analyses.reduce((sum, a) => sum + a.complexity.hooks, 0) / analyses.length)}

### Apr√®s Modernisation (objectifs)
- **Lignes moyennes/composant**: <200
- **Fonctions moyennes/composant**: <8
- **Hooks moyens/composant**: <5
- **Temps modification**: -50%
- **Testabilit√©**: +80%

---

## CONCLUSION

La modernisation de ces ${analyses.length} composants critiques r√©duira significativement la dette technique et am√©liorera la maintenabilit√© du projet.

**ROI attendu**:
- **Court terme**: +50% v√©locit√© d√©veloppement
- **Moyen terme**: -70% bugs interface
- **Long terme**: +200% facilit√© onboarding √©quipe

**Prochaine √©tape**: Validation technique et d√©marrage par CheckoutClientPage.
`;

    // Sauvegarde du plan
    try {
      const planPath = join(process.cwd(), 'COMPONENT_MODERNIZATION_PLAN.md');
      require('fs').writeFileSync(planPath, plan);
      console.log(`üìÑ Plan de modernisation g√©n√©r√©: ${planPath}`);
      
      this.displayComponentSummary(sortedAnalyses);
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde plan:', error);
    }
  }

  /**
   * Traduit les patterns techniques en fran√ßais
   */
  private translatePattern(pattern: string): string {
    const translations = {
      hasFormLogic: 'Logique de formulaire complexe',
      hasApiCalls: 'Appels API int√©gr√©s',
      hasComplexState: '√âtat local complexe',
      hasBusinessLogic: 'Logique m√©tier m√©lang√©e',
      hasStyling: 'Styling inline/coupl√©',
      hasEventHandlers: 'Nombreux gestionnaires d\'√©v√©nements'
    };
    
    return translations[pattern] || pattern;
  }

  /**
   * G√©n√®re la structure de fichiers recommand√©e
   */
  private generateFileStructure(analysis: ComponentAnalysis): string {
    const baseName = analysis.file.split('/').pop()?.replace('.tsx', '') || 'Component';
    const dir = analysis.file.replace(/\/[^/]+$/, '');
    
    let structure = `${dir}/
‚îú‚îÄ‚îÄ ${baseName.toLowerCase()}/
‚îÇ   ‚îú‚îÄ‚îÄ index.tsx                    # Composant principal
‚îÇ   ‚îú‚îÄ‚îÄ ${baseName}Provider.tsx      # Context/√©tat global
‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
`;

    for (const hook of analysis.recommendations.extractableHooks) {
      const hookName = hook.split('(')[0].replace('use', '').toLowerCase();
      structure += `‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ use-${hookName}.ts\n`;
    }

    structure += `‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts
`;

    for (const component of analysis.recommendations.extractableComponents) {
      const compName = component.split(' -')[0].toLowerCase();
      structure += `‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ${compName}.tsx\n`;
    }

    structure += `‚îÇ   ‚îî‚îÄ‚îÄ types.ts                    # Types sp√©cifiques
`;

    return structure;
  }

  /**
   * Calcule la r√©duction totale estim√©e
   */
  private calculateTotalReduction(analyses: ComponentAnalysis[]): string {
    const totalLines = analyses.reduce((sum, a) => sum + a.lines, 0);
    const estimatedReduction = Math.round(totalLines * 0.6); // Estimation 60% r√©duction
    
    return `${totalLines} ‚Üí ~${totalLines - estimatedReduction} lignes (-${Math.round((estimatedReduction / totalLines) * 100)}%)`;
  }

  /**
   * Affiche un r√©sum√© dans la console
   */
  private displayComponentSummary(analyses: ComponentAnalysis[]): void {
    console.log('üìä R√âSUM√â MODERNISATION COMPOSANTS\n');

    for (const analysis of analyses) {
      const emoji = analysis.priority === 'CRITICAL' ? 'üî¥' : 
                   analysis.priority === 'HIGH' ? 'üü†' : 
                   analysis.priority === 'MEDIUM' ? 'üü°' : 'üü¢';
      
      console.log(`${emoji} ${analysis.file}`);
      console.log(`   Lignes: ${analysis.lines} ‚Üí Effort: ${analysis.recommendations.effortHours}h`);
      console.log(`   ${analysis.recommendations.estimatedReduction}\n`);
    }

    const totalEffort = analyses.reduce((sum, a) => sum + a.recommendations.effortHours, 0);
    console.log(`üéØ EFFORT TOTAL: ${totalEffort} heures`);
    console.log(`üìà IMPACT: +50% v√©locit√©, -70% bugs UI\n`);
  }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  const analyzer = new ComponentAnalyzer();
  analyzer.analyzeComponents().catch(console.error);
}

export { ComponentAnalyzer };