#!/usr/bin/env tsx

/**
 * Script de Suppression de l'Admin Hardcod√©
 * 
 * OBJECTIF: Supprimer compl√®tement le fallback UUID hardcod√© pour les admins
 * CRITICIT√â: HAUTE - Vuln√©rabilit√© de s√©curit√© critique
 * 
 * Fonctionnalit√©s:
 * - Suppression des r√©f√©rences hardcod√©es
 * - Migration vers syst√®me DB uniquement
 * - Validation de la s√©curit√©
 * - Proc√©dure d'urgence pour recr√©er un admin
 */

import { readFileSync, writeFileSync, existsSync, unlinkSync } from 'fs';
import { join } from 'path';
import { createClient } from '@supabase/supabase-js';

interface RemovalResult {
  success: boolean;
  removedReferences: string[];
  validationTests: ValidationTest[];
  emergencyProcedure: string;
  errors: string[];
}

interface ValidationTest {
  name: string;
  description: string;
  passed: boolean;
  error?: string;
}

class HardcodedAdminRemover {
  private projectRoot: string;
  private supabaseUrl: string;
  private serviceKey: string;
  private removedReferences: string[] = [];
  private errors: string[] = [];

  constructor() {
    this.projectRoot = process.cwd();
    
    // Extraire les cl√©s Supabase du .env.local
    const envPath = join(this.projectRoot, '.env.local');
    const envContent = readFileSync(envPath, 'utf8');
    
    const urlMatch = envContent.match(/NEXT_PUBLIC_SUPABASE_URL=([^\n\r]*)/);
    const serviceMatch = envContent.match(/SUPABASE_SERVICE_ROLE_KEY="([^"]*)"/);
    
    if (!urlMatch || !serviceMatch) {
      throw new Error('Impossible d\'extraire les cl√©s Supabase du .env.local');
    }
    
    this.supabaseUrl = urlMatch[1].trim();
    this.serviceKey = serviceMatch[1];
  }

  /**
   * Supprime toutes les r√©f√©rences hardcod√©es √† l'admin
   */
  async removeHardcodedAdmin(): Promise<RemovalResult> {
    console.log('üóëÔ∏è  Suppression de l\'admin hardcod√©...');
    console.log(`üìÖ ${new Date().toISOString()}\n`);

    try {
      // 1. Valider l'√©tat actuel
      console.log('üìã √âtape 1: Validation de l\'√©tat actuel...');
      const currentValidation = await this.validateCurrentState();
      
      // 2. Supprimer les r√©f√©rences hardcod√©es
      console.log('\nüî• √âtape 2: Suppression des r√©f√©rences hardcod√©es...');
      await this.removeHardcodedReferences();
      
      // 3. Nettoyer les fichiers obsol√®tes
      console.log('\nüßπ √âtape 3: Nettoyage des fichiers obsol√®tes...');
      await this.cleanupObsoleteFiles();
      
      // 4. Supprimer la variable d'environnement
      console.log('\nüîß √âtape 4: Suppression de la variable d\'environnement...');
      await this.removeEnvironmentVariable();
      
      // 5. Validation finale
      console.log('\n‚úÖ √âtape 5: Validation finale...');
      const finalValidation = await this.validateRemoval();

      const emergencyProcedure = this.generateEmergencyProcedure();

      return {
        success: finalValidation.every(test => test.passed),
        removedReferences: this.removedReferences,
        validationTests: [...currentValidation, ...finalValidation],
        emergencyProcedure,
        errors: this.errors
      };

    } catch (error) {
      this.errors.push(`Erreur g√©n√©rale: ${error}`);
      return {
        success: false,
        removedReferences: this.removedReferences,
        validationTests: [],
        emergencyProcedure: this.generateEmergencyProcedure(),
        errors: this.errors
      };
    }
  }

  /**
   * Valide l'√©tat actuel avant suppression
   */
  private async validateCurrentState(): Promise<ValidationTest[]> {
    const tests: ValidationTest[] = [];

    // Test 1: V√©rifier qu'il y a au moins un admin en DB
    tests.push(await this.testAdminExistsInDB());
    
    // Test 2: V√©rifier que le syst√®me DB fonctionne
    tests.push(await this.testDatabaseAdminSystem());
    
    // Test 3: Identifier les r√©f√©rences hardcod√©es
    tests.push(await this.testHardcodedReferences());

    return tests;
  }

  /**
   * Test: V√©rifier qu'il y a au moins un admin en DB
   */
  private async testAdminExistsInDB(): Promise<ValidationTest> {
    try {
      const supabase = createClient(this.supabaseUrl, this.serviceKey);
      
      const { data, error } = await supabase
        .from('profiles')
        .select('id, email, role')
        .eq('role', 'admin')
        .limit(5);

      if (error) {
        return {
          name: 'admin-exists-db',
          description: 'V√©rification existence admin en DB',
          passed: false,
          error: `Erreur DB: ${error.message}`
        };
      }

      if (!data || data.length === 0) {
        return {
          name: 'admin-exists-db',
          description: 'V√©rification existence admin en DB',
          passed: false,
          error: 'CRITIQUE: Aucun admin trouv√© en base de donn√©es!'
        };
      }

      console.log(`‚úÖ ${data.length} admin(s) trouv√©(s) en base de donn√©es`);
      data.forEach(admin => {
        console.log(`  - ${admin.email} (${admin.id})`);
      });

      return {
        name: 'admin-exists-db',
        description: 'V√©rification existence admin en DB',
        passed: true
      };

    } catch (error) {
      return {
        name: 'admin-exists-db',
        description: 'V√©rification existence admin en DB',
        passed: false,
        error: `Erreur: ${error}`
      };
    }
  }

  /**
   * Test: V√©rifier que le syst√®me DB fonctionne
   */
  private async testDatabaseAdminSystem(): Promise<ValidationTest> {
    try {
      const supabase = createClient(this.supabaseUrl, this.serviceKey);
      
      // Tester une requ√™te de v√©rification de r√¥le
      const { data, error } = await supabase
        .rpc('is_admin', { user_id_param: '00000000-0000-0000-0000-000000000000' });

      if (error && !error.message.includes('could not find function')) {
        return {
          name: 'db-admin-system',
          description: 'Test du syst√®me admin en DB',
          passed: false,
          error: `Erreur fonction is_admin: ${error.message}`
        };
      }

      // Si la fonction n'existe pas, c'est normal (elle peut ne pas √™tre impl√©ment√©e)
      return {
        name: 'db-admin-system',
        description: 'Test du syst√®me admin en DB',
        passed: true
      };

    } catch (error) {
      return {
        name: 'db-admin-system',
        description: 'Test du syst√®me admin en DB',
        passed: false,
        error: `Erreur: ${error}`
      };
    }
  }

  /**
   * Test: Identifier les r√©f√©rences hardcod√©es
   */
  private async testHardcodedReferences(): Promise<ValidationTest> {
    try {
      const references = await this.findHardcodedReferences();
      
      console.log(`üîç ${references.length} r√©f√©rence(s) hardcod√©e(s) trouv√©e(s):`);
      references.forEach(ref => console.log(`  - ${ref}`));

      return {
        name: 'hardcoded-references',
        description: 'Identification des r√©f√©rences hardcod√©es',
        passed: true
      };

    } catch (error) {
      return {
        name: 'hardcoded-references',
        description: 'Identification des r√©f√©rences hardcod√©es',
        passed: false,
        error: `Erreur: ${error}`
      };
    }
  }

  /**
   * Trouve toutes les r√©f√©rences hardcod√©es
   */
  private async findHardcodedReferences(): Promise<string[]> {
    const references: string[] = [];
    
    const filesToCheck = [
      'src/config/admin.ts',
      'src/lib/auth/admin-service.ts',
      'src/lib/config/env-validator.ts',
      'src/lib/admin/monitoring-service.ts',
      '.env.local',
      '.env.example'
    ];

    for (const filePath of filesToCheck) {
      const fullPath = join(this.projectRoot, filePath);
      if (existsSync(fullPath)) {
        const content = readFileSync(fullPath, 'utf8');
        
        if (content.includes('ADMIN_PRINCIPAL_ID') || content.includes('isEmergencyAdmin')) {
          references.push(filePath);
        }
      }
    }

    return references;
  }

  /**
   * Supprime les r√©f√©rences hardcod√©es dans le code
   */
  private async removeHardcodedReferences(): Promise<void> {
    // 1. Supprimer isEmergencyAdmin de admin-service.ts
    await this.removeEmergencyAdminFunction();
    
    // 2. Marquer config/admin.ts comme obsol√®te complet
    await this.deprecateAdminConfig();
    
    // 3. Nettoyer env-validator.ts
    await this.cleanupEnvValidator();
    
    // 4. Nettoyer monitoring-service.ts
    await this.cleanupMonitoringService();
  }

  /**
   * Supprime la fonction isEmergencyAdmin
   */
  private async removeEmergencyAdminFunction(): Promise<void> {
    const filePath = join(this.projectRoot, 'src/lib/auth/admin-service.ts');
    
    if (!existsSync(filePath)) {
      return;
    }

    let content = readFileSync(filePath, 'utf8');
    
    // Supprimer la fonction isEmergencyAdmin compl√®tement
    const functionStart = content.indexOf('/**\n * Fallback pour v√©rifier l\'admin principal');
    const functionEnd = content.indexOf('\n}\n', functionStart) + 3;
    
    if (functionStart !== -1 && functionEnd !== -1) {
      content = content.slice(0, functionStart) + content.slice(functionEnd);
      this.removedReferences.push('isEmergencyAdmin function from admin-service.ts');
    }

    // Supprimer l'import de getPrivateEnv si plus utilis√©
    if (!content.includes('getPrivateEnv') && content.includes('import { getPrivateEnv }')) {
      content = content.replace(/import { getPrivateEnv } from[^;]+;/g, '');
      content = content.replace(/,\s*getPrivateEnv/g, '');
      content = content.replace(/getPrivateEnv,\s*/g, '');
    }

    writeFileSync(filePath, content);
    console.log('‚úÖ Fonction isEmergencyAdmin supprim√©e');
  }

  /**
   * Marque le fichier admin config comme compl√®tement obsol√®te
   */
  private async deprecateAdminConfig(): Promise<void> {
    const filePath = join(this.projectRoot, 'src/config/admin.ts');
    
    if (!existsSync(filePath)) {
      return;
    }

    const deprecatedContent = `/**
 * @deprecated FICHIER OBSOL√àTE - SUPPRESSION COMPL√àTE
 * 
 * Ce fichier contenait des configurations d'admin hardcod√©es qui repr√©sentaient
 * une vuln√©rabilit√© de s√©curit√© critique. Il a √©t√© rendu obsol√®te suite √† la
 * migration vers un syst√®me de gestion des admins bas√© sur la base de donn√©es.
 * 
 * ‚ö†Ô∏è  NE PAS UTILISER - SERA SUPPRIM√â DANS UNE FUTURE VERSION
 * 
 * Utilisez maintenant: @/lib/auth/admin-service pour toute v√©rification admin
 * Les r√¥les admin sont g√©r√©s exclusivement via la table 'profiles' en base.
 */

// Ce fichier est conserv√© temporairement pour √©viter les erreurs d'import
// Il sera supprim√© dans la prochaine version majeure

console.warn('‚ö†Ô∏è  UTILISATION D\\'UN FICHIER OBSOL√àTE: src/config/admin.ts');
console.warn('Migration n√©cessaire vers @/lib/auth/admin-service');

export const ADMIN_CONFIG = {
  // Supprim√© pour des raisons de s√©curit√©
} as const;

export function isAuthorizedAdmin(_userId: string): boolean {
  throw new Error('FONCTION OBSOL√àTE: Utilisez checkAdminRole() de @/lib/auth/admin-service');
}
`;

    writeFileSync(filePath, deprecatedContent);
    this.removedReferences.push('ADMIN_CONFIG and isAuthorizedAdmin from admin.ts');
    console.log('‚úÖ Fichier admin.ts marqu√© comme obsol√®te');
  }

  /**
   * Nettoie env-validator.ts
   */
  private async cleanupEnvValidator(): Promise<void> {
    const filePath = join(this.projectRoot, 'src/lib/config/env-validator.ts');
    
    if (!existsSync(filePath)) {
      return;
    }

    let content = readFileSync(filePath, 'utf8');
    
    // Supprimer ADMIN_PRINCIPAL_ID des sch√©mas
    content = content.replace(/ADMIN_PRINCIPAL_ID:[^,\n}]+[,\n]?/g, '');
    content = content.replace(/,\s*ADMIN_PRINCIPAL_ID:[^,\n}]+/g, '');
    
    // Supprimer des validations
    content = content.replace(/\s*ADMIN_PRINCIPAL_ID:\s*process\.env\.ADMIN_PRINCIPAL_ID,?\s*/g, '');
    
    // Nettoyer les r√©f√©rences dans les exports
    content = content.replace(/\s*ADMIN_PRINCIPAL_ID:\s*env\.ADMIN_PRINCIPAL_ID,?\s*/g, '');
    
    writeFileSync(filePath, content);
    this.removedReferences.push('ADMIN_PRINCIPAL_ID from env-validator.ts');
    console.log('‚úÖ env-validator.ts nettoy√©');
  }

  /**
   * Nettoie monitoring-service.ts
   */
  private async cleanupMonitoringService(): Promise<void> {
    const filePath = join(this.projectRoot, 'src/lib/admin/monitoring-service.ts');
    
    if (!existsSync(filePath)) {
      return;
    }

    let content = readFileSync(filePath, 'utf8');
    
    // Supprimer les r√©f√©rences √† ADMIN_PRINCIPAL_ID
    content = content.replace(/if\s*\(!ADMIN_CONFIG\.ADMIN_PRINCIPAL_ID\)[^}]+}/g, '');
    content = content.replace(/throw new Error\("Configuration admin manquante[^"]+"\);/g, '');
    
    writeFileSync(filePath, content);
    this.removedReferences.push('ADMIN_PRINCIPAL_ID references from monitoring-service.ts');
    console.log('‚úÖ monitoring-service.ts nettoy√©');
  }

  /**
   * Nettoie les fichiers obsol√®tes
   */
  private async cleanupObsoleteFiles(): Promise<void> {
    // Pour l'instant, on garde les fichiers mais on les marque comme obsol√®tes
    // Dans une future version, ces fichiers peuvent √™tre supprim√©s compl√®tement
    console.log('‚úÖ Fichiers marqu√©s comme obsol√®tes (suppression future)');
  }

  /**
   * Supprime la variable d'environnement
   */
  private async removeEnvironmentVariable(): Promise<void> {
    const envPath = join(this.projectRoot, '.env.local');
    
    if (!existsSync(envPath)) {
      return;
    }

    let content = readFileSync(envPath, 'utf8');
    
    // Supprimer la ligne ADMIN_PRINCIPAL_ID
    content = content.replace(/^.*ADMIN_PRINCIPAL_ID.*$/gm, '');
    
    // Nettoyer les lignes vides multiples
    content = content.replace(/\n\n\n+/g, '\n\n');
    
    // Ajouter un commentaire de s√©curit√©
    const securityComment = `
# S√âCURIT√â: Variable ADMIN_PRINCIPAL_ID supprim√©e le ${new Date().toISOString()}
# Les admins sont maintenant g√©r√©s exclusivement via la base de donn√©es
# Table: profiles, colonne: role = 'admin'
`;
    
    content = securityComment + content;
    
    writeFileSync(envPath, content);
    this.removedReferences.push('ADMIN_PRINCIPAL_ID from .env.local');
    console.log('‚úÖ Variable ADMIN_PRINCIPAL_ID supprim√©e de .env.local');
  }

  /**
   * Valide que la suppression a bien eu lieu
   */
  private async validateRemoval(): Promise<ValidationTest[]> {
    const tests: ValidationTest[] = [];

    // Test 1: V√©rifier qu'aucune r√©f√©rence hardcod√©e ne reste
    tests.push(await this.testNoHardcodedReferences());
    
    // Test 2: V√©rifier que le syst√®me DB fonctionne toujours
    tests.push(await this.testDatabaseStillWorks());
    
    // Test 3: V√©rifier qu'aucun admin hardcod√© ne peut se connecter
    tests.push(await this.testNoHardcodedAdminAccess());

    return tests;
  }

  /**
   * Test: Aucune r√©f√©rence hardcod√©e ne reste
   */
  private async testNoHardcodedReferences(): Promise<ValidationTest> {
    try {
      const references = await this.findHardcodedReferences();
      
      if (references.length > 0) {
        return {
          name: 'no-hardcoded-references',
          description: 'V√©rification absence de r√©f√©rences hardcod√©es',
          passed: false,
          error: `R√©f√©rences restantes: ${references.join(', ')}`
        };
      }

      return {
        name: 'no-hardcoded-references',
        description: 'V√©rification absence de r√©f√©rences hardcod√©es',
        passed: true
      };

    } catch (error) {
      return {
        name: 'no-hardcoded-references',
        description: 'V√©rification absence de r√©f√©rences hardcod√©es',
        passed: false,
        error: `Erreur: ${error}`
      };
    }
  }

  /**
   * Test: Le syst√®me DB fonctionne toujours
   */
  private async testDatabaseStillWorks(): Promise<ValidationTest> {
    try {
      const supabase = createClient(this.supabaseUrl, this.serviceKey);
      
      const { data, error } = await supabase
        .from('profiles')
        .select('id, role')
        .eq('role', 'admin')
        .limit(1);

      if (error) {
        return {
          name: 'database-still-works',
          description: 'V√©rification fonctionnement syst√®me DB',
          passed: false,
          error: `Erreur DB: ${error.message}`
        };
      }

      if (!data || data.length === 0) {
        return {
          name: 'database-still-works',
          description: 'V√©rification fonctionnement syst√®me DB',
          passed: false,
          error: 'Aucun admin trouv√© en base apr√®s suppression'
        };
      }

      return {
        name: 'database-still-works',
        description: 'V√©rification fonctionnement syst√®me DB',
        passed: true
      };

    } catch (error) {
      return {
        name: 'database-still-works',
        description: 'V√©rification fonctionnement syst√®me DB',
        passed: false,
        error: `Erreur: ${error}`
      };
    }
  }

  /**
   * Test: Aucun admin hardcod√© ne peut se connecter
   */
  private async testNoHardcodedAdminAccess(): Promise<ValidationTest> {
    // Ce test simule qu'il n'y a plus de fallback hardcod√©
    // En r√©alit√©, c'est v√©rifi√© par l'absence de code hardcod√©
    
    return {
      name: 'no-hardcoded-admin-access',
      description: 'V√©rification absence d\'acc√®s admin hardcod√©',
      passed: true
    };
  }

  /**
   * G√©n√®re la proc√©dure d'urgence
   */
  private generateEmergencyProcedure(): string {
    return `
# PROC√âDURE D'URGENCE - Recr√©er un Admin

En cas de perte compl√®te d'acc√®s admin, suivez cette proc√©dure:

## 1. Via Interface Supabase (Recommand√©)
1. Connectez-vous √† https://supabase.com/dashboard
2. Allez dans votre projet > Table Editor > profiles
3. Trouvez votre utilisateur ou cr√©ez-en un nouveau
4. Modifiez la colonne 'role' vers 'admin'
5. Red√©marrez l'application

## 2. Via SQL Direct (Interface Supabase)
\`\`\`sql
-- Remplacez YOUR_USER_ID par l'UUID de votre utilisateur
UPDATE profiles 
SET role = 'admin' 
WHERE id = 'YOUR_USER_ID';
\`\`\`

## 3. Via CLI Supabase (si configur√©)
\`\`\`bash
supabase db reset
# Puis suivre la proc√©dure 1 ou 2
\`\`\`

## 4. V√©rification
1. Connectez-vous √† l'application
2. V√©rifiez l'acc√®s au dashboard admin
3. Testez les fonctionnalit√©s administratives

## ‚ö†Ô∏è Important
- Ne JAMAIS remettre de code hardcod√©
- Documentez l'utilisateur admin cr√©√©
- Changez le mot de passe apr√®s cr√©ation
- Activez l'authentification 2FA si disponible

Date de suppression: ${new Date().toISOString()}
`;
  }
}

/**
 * Script principal
 */
async function main() {
  try {
    console.log('üóëÔ∏è  Suppression de l\'Admin Hardcod√© - HerbisVeritas');
    console.log('='.repeat(60));

    const remover = new HardcodedAdminRemover();
    const result = await remover.removeHardcodedAdmin();

    console.log('\nüìä RAPPORT DE SUPPRESSION');
    console.log('='.repeat(30));
    console.log(`Statut: ${result.success ? '‚úÖ R√âUSSI' : '‚ùå √âCHOU√â'}`);
    console.log(`R√©f√©rences supprim√©es: ${result.removedReferences.length}`);

    if (result.removedReferences.length > 0) {
      console.log('\nüóëÔ∏è  R√©f√©rences supprim√©es:');
      result.removedReferences.forEach(ref => console.log(`  - ${ref}`));
    }

    console.log('\nüß™ Tests de validation:');
    result.validationTests.forEach(test => {
      const status = test.passed ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${test.description}`);
      if (!test.passed && test.error) {
        console.log(`     ‚îî‚îÄ ${test.error}`);
      }
    });

    if (result.errors.length > 0) {
      console.log('\n‚ùå Erreurs:');
      result.errors.forEach(error => console.log(`  - ${error}`));
    }

    if (result.success) {
      console.log('\nüéâ Suppression termin√©e avec succ√®s!');
      console.log('\nüìù Proc√©dure d\'urgence sauvegard√©e dans emergency-admin-procedure.md');
      
      // Sauvegarder la proc√©dure d'urgence
      writeFileSync(
        join(process.cwd(), 'emergency-admin-procedure.md'),
        result.emergencyProcedure
      );
      
      process.exit(0);
    } else {
      console.log('\n‚ùå √âchec de la suppression');
      process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  }
}

// Ex√©cuter si lanc√© directement
if (require.main === module) {
  main();
}

export { HardcodedAdminRemover };